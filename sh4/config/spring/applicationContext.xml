<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="  
            http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-3.1.xsd  
            http://www.springframework.org/schema/util   
            http://www.springframework.org/schema/util/spring-util-3.1.xsd">  

 
  
  <!-- annotation scan -->
  <context:component-scan base-package="com.wyk.sh4"/>
  	
  <!-- Data sourse  -->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"
    >
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="url" value="jdbc:mysql://localhost:3306/test" />
    <property name="username" value="root" />
    <property name="password" value="root" />
  </bean>
  
  <!-- This will ensure that Hibernate or JPA exceptions are automatically   
        translated into Spring's generic DataAccessException hierarchy for those   
        classes annotated with Repository. For example, see ***DAOImpl. -->  
  <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    
  
   <!-- JPA Entity Manager Factory -->  
   		<!-- toscan待扫描的实体类包，不再需要persistence.xml -->
   <bean id="entityManagerFactory"
   		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
   		p:packagesToScan="com.wyk.sh4.domain" p:dataSource-ref="dataSource"
   		p:jpaVendorAdapter-ref="hibernateVendor" p:jpaPropertyMap-ref="jpaPropertyMap"/>
   
   <util:map id="jpaPropertyMap">
   		<entry key="hibernate.hbm2ddl.auto" value="update"/>
   		<entry key="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/>
   		<!-- To enable Hibernate's second level cache and query cache settings -->  
        <entry key="hibernate.max_fetch_depth" value="4" />  
        
   </util:map>
   <bean id="hibernateVendor"
  		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
  		p:database="MYSQL" p:showSql="true" p:generateDdl="true"
   		p:databasePlatform="org.hibernate.dialect.MySQLDialect"/> 
  		
   
   <!-- User declarative transaction management -->  
   <tx:annotation-driven transaction-manager="transactionManager"/>
   <!-- Transaction Config -->  		
   <bean id="transactionManager"
    	class="org.springframework.orm.jpa.JpaTransactionManager" 
    	p:entityManagerFactory-ref="entityManagerFactory">
    	<property name="jpaDialect">
    		<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
    	</property>
   </bean>
  
  
   <!-- jpaTemplate manager entityManagerFactory -->
   <bean id="jpaTemplate"
  		 class="org.springframework.orm.jpa.JpaTemplate"
  		 p:entityManagerFactory-ref="entityManagerFactory"/>

</beans>